[1mdiff --git a/build/jme/src/org/luaj/vm2/LuaTable.java b/build/jme/src/org/luaj/vm2/LuaTable.java[m
[1mindex 5b8a561..92c007d 100644[m
[1m--- a/build/jme/src/org/luaj/vm2/LuaTable.java[m
[1m+++ b/build/jme/src/org/luaj/vm2/LuaTable.java[m
[36m@@ -415,6 +415,7 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 				if ( !found ) {[m
 					error( "invalid key to 'next'" );[m
 				}[m
[32m+[m
 				i += 1+array.length;[m
 			}[m
 		} while ( false );[m
[36m@@ -470,7 +471,15 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 				for ( Slot slot = hash[ index ]; slot != null; slot = slot.rest() ) {[m
 					StrongSlot foundSlot;[m
 					if ( ( foundSlot = slot.find( key ) ) != null ) {[m
[31m-						hash[index] = hash[index].set( foundSlot, value );[m
[32m+[m						[32m// XOWA: if slot is NumberValueEntry, but val is string, change slot to NormalEntry; otherwise, if val is "2.", will get coerced to 2 int; ISSUE#:360 DATE:2019-02-16[m
[32m+[m						[32m// note that this check only needs to happen with NumberValueEntry, b/c its set() does n.todouble()[m[41m [m
[32m+[m						[32mSlot set_slot = hash[index];[m
[32m+[m						[32mint set_slot_type = set_slot.Slot_type();[m
[32m+[m						[32mif (set_slot_type == Slot_.Type__number && value.isstring()) {[m
[32m+[m							[32mset_slot = new NormalEntry( key, value );[m
[32m+[m							[32mhash[index] = set_slot;[m[41m							[m
[32m+[m						[32m}[m
[32m+[m						[32mhash[index] = set_slot.set( foundSlot, value );[m
 						return;[m
 					}[m
 				}[m
[36m@@ -925,7 +934,21 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 	/**[m
 	 * Represents a slot in the hash table.[m
 	 */[m
[32m+[m	[32mclass Slot_ {[m
[32m+[m		[32mpublic static final int[m[41m [m
[32m+[m		[32m  Type__dead      = 1[m
[32m+[m		[32m, Type__int       = 2[m
[32m+[m		[32m, Type__link      = 3[m
[32m+[m		[32m, Type__normal    = 4[m
[32m+[m		[32m, Type__number    = 5[m
[32m+[m		[32m, Type__weak_kv   = 6[m
[32m+[m		[32m, Type__weak_key  = 7[m
[32m+[m		[32m, Type__weak_val  = 8[m
[32m+[m		[32m;[m
[32m+[m[41m		[m
[32m+[m	[32m}[m
 	interface Slot {[m
[32m+[m		[32mint Slot_type();[m
 [m
 		/** Return hash{pow2,mod}( first().key().hashCode(), sizeMask ) */[m
 		int keyindex( int hashMask );[m
[36m@@ -998,6 +1021,8 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 			this.entry = entry;[m
 			this.next = next;[m
 		}[m
[32m+[m[41m		[m
[32m+[m		[32mpublic int Slot_type() {return Slot_.Type__link;}[m
 [m
 		public LuaValue key() {[m
 			return entry.key();[m
[36m@@ -1161,6 +1186,8 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 			this.key = key;[m
 			this.value = value;[m
 		}[m
[32m+[m[41m		[m
[32m+[m		[32mpublic int Slot_type() {return Slot_.Type__normal;}[m
 [m
 		public LuaValue key() {[m
 			return key;[m
[36m@@ -1197,6 +1224,8 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 			this.value = value;[m
 		}[m
 [m
[32m+[m		[32mpublic int Slot_type() {return Slot_.Type__int;}[m
[32m+[m[41m		[m
 		public LuaValue key() {[m
 			return valueOf( key );[m
 		}[m
[36m@@ -1234,6 +1263,8 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 			this.key = key;[m
 			this.value = value;[m
 		}[m
[32m+[m[41m		[m
[32m+[m		[32mpublic int Slot_type() {return Slot_.Type__number;}[m
 [m
 		public LuaValue key() {[m
 			return key;[m
[36m@@ -1243,9 +1274,9 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 			return valueOf(value);[m
 		}[m
 [m
[31m-		public Entry set(LuaValue value) {[m
[32m+[m		[32mpublic Entry set(LuaValue value) {[m[41m			[m
 			LuaValue n = value.tonumber();[m
[31m-			if ( !n.isnil() ) {[m
[32m+[m			[32mif (!n.isnil()) {[m
 				this.value = n.todouble();[m
 				return this;[m
 			} else {[m
[36m@@ -1280,6 +1311,7 @@[m [mpublic class LuaTable extends LuaValue implements Metatable {[m
 			return (LuaValue) (key instanceof WeakReference ? ((WeakReference) key).get() : key);[m
 		}[m
 [m
[32m+[m		[32mpublic int Slot_type() {return Slot_.Type__dead;}[m
 		public int keyindex(int hashMask) {[m
 			// Not needed: this entry will be dropped during rehash.[m
 			return 0;[m
